I'll analyze how to improve the performance of your movement detection system. Here are several optimizations you can make:

Search files...

Read file: src/config.py
Based on my analysis of your code, here are several performance optimization strategies:

1. **Reduce image resolution before processing**:
   ```python
   # Resize before processing
   height, width = image.shape[:2]
   new_width = 400  # Lower from 500 to 400
   new_height = int(height * (new_width / width))
   image = cv2.resize(image, (new_width, new_height))
   ```

2. **Lower MediaPipe detection confidence thresholds**:
   Modify your config.py to reduce computational demands:
   ```python
   min_detection_confidence: float = 0.3  # Lower from 0.5
   min_tracking_confidence: float = 0.3  # Lower from 0.5
   ```

3. **Skip frames for pose detection**:
   ```python
   # In MovementDetector.start_camera
   if self.frame_counter % 2 == 0:  # Process every other frame
       landmarks = self.pose_detector.process_frame(image)
   else:
       landmarks = self.previous_landmarks  # Reuse previous landmarks
   self.previous_landmarks = landmarks
   ```

4. **Optimize landmark visibility check**:
   ```python
   # Cache required landmarks to avoid repeated lookups
   def _are_required_landmarks_visible(self, landmarks) -> bool:
       if not hasattr(self, '_required_landmark_cache'):
           self._required_landmark_cache = [
               self.NOSE_INDEX,
               self.LEFT_HIP_INDEX,
               self.LEFT_FOOT_INDEX,
               self.RIGHT_FOOT_INDEX
           ]
       
       for landmark_idx in self._required_landmark_cache:
           if landmark_idx >= len(landmarks.landmark) or landmarks.landmark[landmark_idx].visibility < self.config.visibility_threshold:
               return False
       return True
   ```

5. **Reduce debugging output**:
   Make sure debug mode is disabled in production:
   ```python
   detector = MovementDetector(config, debug=False)
   ```

6. **Disable drawing landmarks when not needed**:
   ```python
   # Only draw landmarks when showing the feed
   if landmarks and not self.isTest:
       self.pose_detector.draw_landmarks(image, landmarks)
   ```

7. **Use lightweight MediaPipe model**:
   ```python
   # In PoseDetector.__init__
   self.pose = self.mp_pose.Pose(
       min_detection_confidence=config.min_detection_confidence,
       min_tracking_confidence=config.min_tracking_confidence,
       model_complexity=0  # Use lightweight model (0, 1, or 2)
   )
   ```

8. **Reduce the number of frames to check**:
   Update config.py to reduce the frame history:
   ```python
   num_frames_to_check: int = 3  # Reduce from 5
   ```

9. **Use GPU acceleration if available**:
   ```python
   # Check if GPU is available
   if cv2.cuda.getCudaEnabledDeviceCount() > 0:
       # Enable GPU acceleration
       cv2.setUseOptimized(True)
       cv2.cuda.setDevice(0)
   ```

10. **Optimize CV2 window handling**:
    ```python
    # Initialize window once outside the loop
    if not self.isTest:
        cv2.namedWindow('Movement Detection', cv2.WINDOW_NORMAL)
    
    # Inside the loop, use cv2.imshow without recreating window
    if not self.isTest:
        cv2.imshow('Movement Detection', image)
    ```

These changes will significantly improve your performance while maintaining functionality. The most effective will be reducing the image resolution, using a lightweight model, and implementing frame skipping.
